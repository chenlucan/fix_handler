// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dms.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dms.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {
namespace dms {

namespace {

const ::google::protobuf::Descriptor* DataPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Trade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trade_reflection_ = NULL;
const ::google::protobuf::Descriptor* BBO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BBO_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bid_reflection_ = NULL;
const ::google::protobuf::Descriptor* Offer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Offer_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2_reflection_ = NULL;
const ::google::protobuf::Descriptor* Contract_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Contract_reflection_ = NULL;
const ::google::protobuf::Descriptor* Turnover_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Turnover_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ContractType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dms_2eproto() {
  protobuf_AddDesc_dms_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dms.proto");
  GOOGLE_CHECK(file != NULL);
  DataPoint_descriptor_ = file->message_type(0);
  static const int DataPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPoint, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPoint, size_),
  };
  DataPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataPoint_descriptor_,
      DataPoint::default_instance_,
      DataPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataPoint));
  Trade_descriptor_ = file->message_type(1);
  static const int Trade_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, last_),
  };
  Trade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Trade_descriptor_,
      Trade::default_instance_,
      Trade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Trade));
  BBO_descriptor_ = file->message_type(2);
  static const int BBO_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBO, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBO, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBO, offer_),
  };
  BBO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BBO_descriptor_,
      BBO::default_instance_,
      BBO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BBO));
  Bid_descriptor_ = file->message_type(3);
  static const int Bid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, bid_),
  };
  Bid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bid_descriptor_,
      Bid::default_instance_,
      Bid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bid));
  Offer_descriptor_ = file->message_type(4);
  static const int Offer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, offer_),
  };
  Offer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Offer_descriptor_,
      Offer::default_instance_,
      Offer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Offer));
  L2_descriptor_ = file->message_type(5);
  static const int L2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2, offer_),
  };
  L2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2_descriptor_,
      L2::default_instance_,
      L2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2));
  Contract_descriptor_ = file->message_type(6);
  static const int Contract_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contract, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contract, tick_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contract, tick_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contract, yesterday_close_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contract, upper_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contract, lower_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contract, contract_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contract, lega_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contract, legb_),
  };
  Contract_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Contract_descriptor_,
      Contract::default_instance_,
      Contract_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contract, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contract, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Contract));
  Turnover_descriptor_ = file->message_type(7);
  static const int Turnover_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turnover, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turnover, total_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turnover, turnover_),
  };
  Turnover_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Turnover_descriptor_,
      Turnover::default_instance_,
      Turnover_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turnover, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turnover, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Turnover));
  ContractType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dms_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataPoint_descriptor_, &DataPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Trade_descriptor_, &Trade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BBO_descriptor_, &BBO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bid_descriptor_, &Bid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Offer_descriptor_, &Offer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2_descriptor_, &L2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Contract_descriptor_, &Contract::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Turnover_descriptor_, &Turnover::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dms_2eproto() {
  delete DataPoint::default_instance_;
  delete DataPoint_reflection_;
  delete Trade::default_instance_;
  delete Trade_reflection_;
  delete BBO::default_instance_;
  delete BBO_reflection_;
  delete Bid::default_instance_;
  delete Bid_reflection_;
  delete Offer::default_instance_;
  delete Offer_reflection_;
  delete L2::default_instance_;
  delete L2_reflection_;
  delete Contract::default_instance_;
  delete Contract_reflection_;
  delete Turnover::default_instance_;
  delete Turnover_reflection_;
}

void protobuf_AddDesc_dms_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tdms.proto\022\006pb.dms\"(\n\tDataPoint\022\r\n\005pric"
    "e\030\001 \001(\001\022\014\n\004size\030\002 \001(\004\":\n\005Trade\022\020\n\010contra"
    "ct\030\001 \001(\t\022\037\n\004last\030\002 \001(\0132\021.pb.dms.DataPoin"
    "t\"Y\n\003BBO\022\020\n\010contract\030\001 \001(\t\022\036\n\003bid\030\002 \001(\0132"
    "\021.pb.dms.DataPoint\022 \n\005offer\030\003 \001(\0132\021.pb.d"
    "ms.DataPoint\"7\n\003Bid\022\020\n\010contract\030\001 \001(\t\022\036\n"
    "\003bid\030\002 \001(\0132\021.pb.dms.DataPoint\";\n\005Offer\022\020"
    "\n\010contract\030\001 \001(\t\022 \n\005offer\030\002 \001(\0132\021.pb.dms"
    ".DataPoint\"X\n\002L2\022\020\n\010contract\030\001 \001(\t\022\036\n\003bi"
    "d\030\002 \003(\0132\021.pb.dms.DataPoint\022 \n\005offer\030\003 \003("
    "\0132\021.pb.dms.DataPoint\"\321\001\n\010Contract\022\014\n\004nam"
    "e\030\001 \002(\t\022\021\n\ttick_size\030\002 \002(\t\022\022\n\ntick_value"
    "\030\003 \001(\t\022\035\n\025yesterday_close_price\030\004 \001(\t\022\023\n"
    "\013upper_limit\030\005 \001(\t\022\023\n\013lower_limit\030\006 \001(\t\022"
    "+\n\rcontract_type\030\007 \001(\0162\024.pb.dms.Contract"
    "Type\022\014\n\004legA\030\010 \001(\t\022\014\n\004legB\030\t \001(\t\"D\n\010Turn"
    "over\022\020\n\010contract\030\001 \001(\t\022\024\n\014total_volume\030\002"
    " \001(\004\022\020\n\010turnover\030\003 \001(\001*:\n\014ContractType\022\013"
    "\n\007CT_None\020\000\022\016\n\nCT_Futures\020\001\022\r\n\tCT_Spread"
    "\020\002", 762);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dms.proto", &protobuf_RegisterTypes);
  DataPoint::default_instance_ = new DataPoint();
  Trade::default_instance_ = new Trade();
  BBO::default_instance_ = new BBO();
  Bid::default_instance_ = new Bid();
  Offer::default_instance_ = new Offer();
  L2::default_instance_ = new L2();
  Contract::default_instance_ = new Contract();
  Turnover::default_instance_ = new Turnover();
  DataPoint::default_instance_->InitAsDefaultInstance();
  Trade::default_instance_->InitAsDefaultInstance();
  BBO::default_instance_->InitAsDefaultInstance();
  Bid::default_instance_->InitAsDefaultInstance();
  Offer::default_instance_->InitAsDefaultInstance();
  L2::default_instance_->InitAsDefaultInstance();
  Contract::default_instance_->InitAsDefaultInstance();
  Turnover::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dms_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dms_2eproto {
  StaticDescriptorInitializer_dms_2eproto() {
    protobuf_AddDesc_dms_2eproto();
  }
} static_descriptor_initializer_dms_2eproto_;
const ::google::protobuf::EnumDescriptor* ContractType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContractType_descriptor_;
}
bool ContractType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DataPoint::kPriceFieldNumber;
const int DataPoint::kSizeFieldNumber;
#endif  // !_MSC_VER

DataPoint::DataPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.dms.DataPoint)
}

void DataPoint::InitAsDefaultInstance() {
}

DataPoint::DataPoint(const DataPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.dms.DataPoint)
}

void DataPoint::SharedCtor() {
  _cached_size_ = 0;
  price_ = 0;
  size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataPoint::~DataPoint() {
  // @@protoc_insertion_point(destructor:pb.dms.DataPoint)
  SharedDtor();
}

void DataPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataPoint_descriptor_;
}

const DataPoint& DataPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dms_2eproto();
  return *default_instance_;
}

DataPoint* DataPoint::default_instance_ = NULL;

DataPoint* DataPoint::New() const {
  return new DataPoint;
}

void DataPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DataPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(price_, size_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.dms.DataPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double price = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional uint64 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.dms.DataPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.dms.DataPoint)
  return false;
#undef DO_
}

void DataPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.dms.DataPoint)
  // optional double price = 1;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->price(), output);
  }

  // optional uint64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.dms.DataPoint)
}

::google::protobuf::uint8* DataPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.dms.DataPoint)
  // optional double price = 1;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->price(), target);
  }

  // optional uint64 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.dms.DataPoint)
  return target;
}

int DataPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double price = 1;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional uint64 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataPoint::MergeFrom(const DataPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataPoint::CopyFrom(const DataPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPoint::IsInitialized() const {

  return true;
}

void DataPoint::Swap(DataPoint* other) {
  if (other != this) {
    std::swap(price_, other->price_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataPoint_descriptor_;
  metadata.reflection = DataPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Trade::kContractFieldNumber;
const int Trade::kLastFieldNumber;
#endif  // !_MSC_VER

Trade::Trade()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.dms.Trade)
}

void Trade::InitAsDefaultInstance() {
  last_ = const_cast< ::pb::dms::DataPoint*>(&::pb::dms::DataPoint::default_instance());
}

Trade::Trade(const Trade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.dms.Trade)
}

void Trade::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Trade::~Trade() {
  // @@protoc_insertion_point(destructor:pb.dms.Trade)
  SharedDtor();
}

void Trade::SharedDtor() {
  if (contract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contract_;
  }
  if (this != default_instance_) {
    delete last_;
  }
}

void Trade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trade_descriptor_;
}

const Trade& Trade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dms_2eproto();
  return *default_instance_;
}

Trade* Trade::default_instance_ = NULL;

Trade* Trade::New() const {
  return new Trade;
}

void Trade::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_contract()) {
      if (contract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contract_->clear();
      }
    }
    if (has_last()) {
      if (last_ != NULL) last_->::pb::dms::DataPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Trade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.dms.Trade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string contract = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contract");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_last;
        break;
      }

      // optional .pb.dms.DataPoint last = 2;
      case 2: {
        if (tag == 18) {
         parse_last:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.dms.Trade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.dms.Trade)
  return false;
#undef DO_
}

void Trade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.dms.Trade)
  // optional string contract = 1;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contract");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->contract(), output);
  }

  // optional .pb.dms.DataPoint last = 2;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->last(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.dms.Trade)
}

::google::protobuf::uint8* Trade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.dms.Trade)
  // optional string contract = 1;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contract");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contract(), target);
  }

  // optional .pb.dms.DataPoint last = 2;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->last(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.dms.Trade)
  return target;
}

int Trade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string contract = 1;
    if (has_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract());
    }

    // optional .pb.dms.DataPoint last = 2;
    if (has_last()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Trade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Trade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trade::MergeFrom(const Trade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contract()) {
      set_contract(from.contract());
    }
    if (from.has_last()) {
      mutable_last()->::pb::dms::DataPoint::MergeFrom(from.last());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Trade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trade::CopyFrom(const Trade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trade::IsInitialized() const {

  return true;
}

void Trade::Swap(Trade* other) {
  if (other != this) {
    std::swap(contract_, other->contract_);
    std::swap(last_, other->last_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Trade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trade_descriptor_;
  metadata.reflection = Trade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BBO::kContractFieldNumber;
const int BBO::kBidFieldNumber;
const int BBO::kOfferFieldNumber;
#endif  // !_MSC_VER

BBO::BBO()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.dms.BBO)
}

void BBO::InitAsDefaultInstance() {
  bid_ = const_cast< ::pb::dms::DataPoint*>(&::pb::dms::DataPoint::default_instance());
  offer_ = const_cast< ::pb::dms::DataPoint*>(&::pb::dms::DataPoint::default_instance());
}

BBO::BBO(const BBO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.dms.BBO)
}

void BBO::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_ = NULL;
  offer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BBO::~BBO() {
  // @@protoc_insertion_point(destructor:pb.dms.BBO)
  SharedDtor();
}

void BBO::SharedDtor() {
  if (contract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contract_;
  }
  if (this != default_instance_) {
    delete bid_;
    delete offer_;
  }
}

void BBO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BBO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BBO_descriptor_;
}

const BBO& BBO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dms_2eproto();
  return *default_instance_;
}

BBO* BBO::default_instance_ = NULL;

BBO* BBO::New() const {
  return new BBO;
}

void BBO::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_contract()) {
      if (contract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contract_->clear();
      }
    }
    if (has_bid()) {
      if (bid_ != NULL) bid_->::pb::dms::DataPoint::Clear();
    }
    if (has_offer()) {
      if (offer_ != NULL) offer_->::pb::dms::DataPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BBO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.dms.BBO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string contract = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contract");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bid;
        break;
      }

      // optional .pb.dms.DataPoint bid = 2;
      case 2: {
        if (tag == 18) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offer;
        break;
      }

      // optional .pb.dms.DataPoint offer = 3;
      case 3: {
        if (tag == 26) {
         parse_offer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.dms.BBO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.dms.BBO)
  return false;
#undef DO_
}

void BBO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.dms.BBO)
  // optional string contract = 1;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contract");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->contract(), output);
  }

  // optional .pb.dms.DataPoint bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bid(), output);
  }

  // optional .pb.dms.DataPoint offer = 3;
  if (has_offer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->offer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.dms.BBO)
}

::google::protobuf::uint8* BBO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.dms.BBO)
  // optional string contract = 1;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contract");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contract(), target);
  }

  // optional .pb.dms.DataPoint bid = 2;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bid(), target);
  }

  // optional .pb.dms.DataPoint offer = 3;
  if (has_offer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->offer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.dms.BBO)
  return target;
}

int BBO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string contract = 1;
    if (has_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract());
    }

    // optional .pb.dms.DataPoint bid = 2;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bid());
    }

    // optional .pb.dms.DataPoint offer = 3;
    if (has_offer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BBO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BBO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BBO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BBO::MergeFrom(const BBO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contract()) {
      set_contract(from.contract());
    }
    if (from.has_bid()) {
      mutable_bid()->::pb::dms::DataPoint::MergeFrom(from.bid());
    }
    if (from.has_offer()) {
      mutable_offer()->::pb::dms::DataPoint::MergeFrom(from.offer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BBO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBO::CopyFrom(const BBO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBO::IsInitialized() const {

  return true;
}

void BBO::Swap(BBO* other) {
  if (other != this) {
    std::swap(contract_, other->contract_);
    std::swap(bid_, other->bid_);
    std::swap(offer_, other->offer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BBO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BBO_descriptor_;
  metadata.reflection = BBO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bid::kContractFieldNumber;
const int Bid::kBidFieldNumber;
#endif  // !_MSC_VER

Bid::Bid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.dms.Bid)
}

void Bid::InitAsDefaultInstance() {
  bid_ = const_cast< ::pb::dms::DataPoint*>(&::pb::dms::DataPoint::default_instance());
}

Bid::Bid(const Bid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.dms.Bid)
}

void Bid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bid::~Bid() {
  // @@protoc_insertion_point(destructor:pb.dms.Bid)
  SharedDtor();
}

void Bid::SharedDtor() {
  if (contract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contract_;
  }
  if (this != default_instance_) {
    delete bid_;
  }
}

void Bid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bid_descriptor_;
}

const Bid& Bid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dms_2eproto();
  return *default_instance_;
}

Bid* Bid::default_instance_ = NULL;

Bid* Bid::New() const {
  return new Bid;
}

void Bid::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_contract()) {
      if (contract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contract_->clear();
      }
    }
    if (has_bid()) {
      if (bid_ != NULL) bid_->::pb::dms::DataPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.dms.Bid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string contract = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contract");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bid;
        break;
      }

      // optional .pb.dms.DataPoint bid = 2;
      case 2: {
        if (tag == 18) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.dms.Bid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.dms.Bid)
  return false;
#undef DO_
}

void Bid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.dms.Bid)
  // optional string contract = 1;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contract");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->contract(), output);
  }

  // optional .pb.dms.DataPoint bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.dms.Bid)
}

::google::protobuf::uint8* Bid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.dms.Bid)
  // optional string contract = 1;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contract");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contract(), target);
  }

  // optional .pb.dms.DataPoint bid = 2;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.dms.Bid)
  return target;
}

int Bid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string contract = 1;
    if (has_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract());
    }

    // optional .pb.dms.DataPoint bid = 2;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bid::MergeFrom(const Bid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contract()) {
      set_contract(from.contract());
    }
    if (from.has_bid()) {
      mutable_bid()->::pb::dms::DataPoint::MergeFrom(from.bid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bid::CopyFrom(const Bid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bid::IsInitialized() const {

  return true;
}

void Bid::Swap(Bid* other) {
  if (other != this) {
    std::swap(contract_, other->contract_);
    std::swap(bid_, other->bid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bid_descriptor_;
  metadata.reflection = Bid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Offer::kContractFieldNumber;
const int Offer::kOfferFieldNumber;
#endif  // !_MSC_VER

Offer::Offer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.dms.Offer)
}

void Offer::InitAsDefaultInstance() {
  offer_ = const_cast< ::pb::dms::DataPoint*>(&::pb::dms::DataPoint::default_instance());
}

Offer::Offer(const Offer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.dms.Offer)
}

void Offer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Offer::~Offer() {
  // @@protoc_insertion_point(destructor:pb.dms.Offer)
  SharedDtor();
}

void Offer::SharedDtor() {
  if (contract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contract_;
  }
  if (this != default_instance_) {
    delete offer_;
  }
}

void Offer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Offer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Offer_descriptor_;
}

const Offer& Offer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dms_2eproto();
  return *default_instance_;
}

Offer* Offer::default_instance_ = NULL;

Offer* Offer::New() const {
  return new Offer;
}

void Offer::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_contract()) {
      if (contract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contract_->clear();
      }
    }
    if (has_offer()) {
      if (offer_ != NULL) offer_->::pb::dms::DataPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Offer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.dms.Offer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string contract = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contract");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_offer;
        break;
      }

      // optional .pb.dms.DataPoint offer = 2;
      case 2: {
        if (tag == 18) {
         parse_offer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.dms.Offer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.dms.Offer)
  return false;
#undef DO_
}

void Offer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.dms.Offer)
  // optional string contract = 1;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contract");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->contract(), output);
  }

  // optional .pb.dms.DataPoint offer = 2;
  if (has_offer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->offer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.dms.Offer)
}

::google::protobuf::uint8* Offer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.dms.Offer)
  // optional string contract = 1;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contract");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contract(), target);
  }

  // optional .pb.dms.DataPoint offer = 2;
  if (has_offer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->offer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.dms.Offer)
  return target;
}

int Offer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string contract = 1;
    if (has_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract());
    }

    // optional .pb.dms.DataPoint offer = 2;
    if (has_offer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Offer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Offer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Offer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Offer::MergeFrom(const Offer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contract()) {
      set_contract(from.contract());
    }
    if (from.has_offer()) {
      mutable_offer()->::pb::dms::DataPoint::MergeFrom(from.offer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Offer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Offer::CopyFrom(const Offer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Offer::IsInitialized() const {

  return true;
}

void Offer::Swap(Offer* other) {
  if (other != this) {
    std::swap(contract_, other->contract_);
    std::swap(offer_, other->offer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Offer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Offer_descriptor_;
  metadata.reflection = Offer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2::kContractFieldNumber;
const int L2::kBidFieldNumber;
const int L2::kOfferFieldNumber;
#endif  // !_MSC_VER

L2::L2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.dms.L2)
}

void L2::InitAsDefaultInstance() {
}

L2::L2(const L2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.dms.L2)
}

void L2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2::~L2() {
  // @@protoc_insertion_point(destructor:pb.dms.L2)
  SharedDtor();
}

void L2::SharedDtor() {
  if (contract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contract_;
  }
  if (this != default_instance_) {
  }
}

void L2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2_descriptor_;
}

const L2& L2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dms_2eproto();
  return *default_instance_;
}

L2* L2::default_instance_ = NULL;

L2* L2::New() const {
  return new L2;
}

void L2::Clear() {
  if (has_contract()) {
    if (contract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      contract_->clear();
    }
  }
  bid_.Clear();
  offer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.dms.L2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string contract = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contract");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bid;
        break;
      }

      // repeated .pb.dms.DataPoint bid = 2;
      case 2: {
        if (tag == 18) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bid;
        if (input->ExpectTag(26)) goto parse_offer;
        break;
      }

      // repeated .pb.dms.DataPoint offer = 3;
      case 3: {
        if (tag == 26) {
         parse_offer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offer;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.dms.L2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.dms.L2)
  return false;
#undef DO_
}

void L2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.dms.L2)
  // optional string contract = 1;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contract");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->contract(), output);
  }

  // repeated .pb.dms.DataPoint bid = 2;
  for (int i = 0; i < this->bid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bid(i), output);
  }

  // repeated .pb.dms.DataPoint offer = 3;
  for (int i = 0; i < this->offer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->offer(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.dms.L2)
}

::google::protobuf::uint8* L2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.dms.L2)
  // optional string contract = 1;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contract");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contract(), target);
  }

  // repeated .pb.dms.DataPoint bid = 2;
  for (int i = 0; i < this->bid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bid(i), target);
  }

  // repeated .pb.dms.DataPoint offer = 3;
  for (int i = 0; i < this->offer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->offer(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.dms.L2)
  return target;
}

int L2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string contract = 1;
    if (has_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract());
    }

  }
  // repeated .pb.dms.DataPoint bid = 2;
  total_size += 1 * this->bid_size();
  for (int i = 0; i < this->bid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bid(i));
  }

  // repeated .pb.dms.DataPoint offer = 3;
  total_size += 1 * this->offer_size();
  for (int i = 0; i < this->offer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offer(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2::MergeFrom(const L2& from) {
  GOOGLE_CHECK_NE(&from, this);
  bid_.MergeFrom(from.bid_);
  offer_.MergeFrom(from.offer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contract()) {
      set_contract(from.contract());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2::CopyFrom(const L2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2::IsInitialized() const {

  return true;
}

void L2::Swap(L2* other) {
  if (other != this) {
    std::swap(contract_, other->contract_);
    bid_.Swap(&other->bid_);
    offer_.Swap(&other->offer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2_descriptor_;
  metadata.reflection = L2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Contract::kNameFieldNumber;
const int Contract::kTickSizeFieldNumber;
const int Contract::kTickValueFieldNumber;
const int Contract::kYesterdayClosePriceFieldNumber;
const int Contract::kUpperLimitFieldNumber;
const int Contract::kLowerLimitFieldNumber;
const int Contract::kContractTypeFieldNumber;
const int Contract::kLegAFieldNumber;
const int Contract::kLegBFieldNumber;
#endif  // !_MSC_VER

Contract::Contract()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.dms.Contract)
}

void Contract::InitAsDefaultInstance() {
}

Contract::Contract(const Contract& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.dms.Contract)
}

void Contract::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tick_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tick_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yesterday_close_price_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upper_limit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lower_limit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_type_ = 0;
  lega_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  legb_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Contract::~Contract() {
  // @@protoc_insertion_point(destructor:pb.dms.Contract)
  SharedDtor();
}

void Contract::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (tick_size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tick_size_;
  }
  if (tick_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tick_value_;
  }
  if (yesterday_close_price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete yesterday_close_price_;
  }
  if (upper_limit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete upper_limit_;
  }
  if (lower_limit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lower_limit_;
  }
  if (lega_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lega_;
  }
  if (legb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete legb_;
  }
  if (this != default_instance_) {
  }
}

void Contract::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Contract::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Contract_descriptor_;
}

const Contract& Contract::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dms_2eproto();
  return *default_instance_;
}

Contract* Contract::default_instance_ = NULL;

Contract* Contract::New() const {
  return new Contract;
}

void Contract::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_tick_size()) {
      if (tick_size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tick_size_->clear();
      }
    }
    if (has_tick_value()) {
      if (tick_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tick_value_->clear();
      }
    }
    if (has_yesterday_close_price()) {
      if (yesterday_close_price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        yesterday_close_price_->clear();
      }
    }
    if (has_upper_limit()) {
      if (upper_limit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        upper_limit_->clear();
      }
    }
    if (has_lower_limit()) {
      if (lower_limit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lower_limit_->clear();
      }
    }
    contract_type_ = 0;
    if (has_lega()) {
      if (lega_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lega_->clear();
      }
    }
  }
  if (has_legb()) {
    if (legb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      legb_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Contract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.dms.Contract)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tick_size;
        break;
      }

      // required string tick_size = 2;
      case 2: {
        if (tag == 18) {
         parse_tick_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tick_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tick_size().data(), this->tick_size().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tick_size");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tick_value;
        break;
      }

      // optional string tick_value = 3;
      case 3: {
        if (tag == 26) {
         parse_tick_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tick_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tick_value().data(), this->tick_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tick_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_yesterday_close_price;
        break;
      }

      // optional string yesterday_close_price = 4;
      case 4: {
        if (tag == 34) {
         parse_yesterday_close_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yesterday_close_price()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->yesterday_close_price().data(), this->yesterday_close_price().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "yesterday_close_price");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_upper_limit;
        break;
      }

      // optional string upper_limit = 5;
      case 5: {
        if (tag == 42) {
         parse_upper_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upper_limit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->upper_limit().data(), this->upper_limit().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "upper_limit");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_lower_limit;
        break;
      }

      // optional string lower_limit = 6;
      case 6: {
        if (tag == 50) {
         parse_lower_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lower_limit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lower_limit().data(), this->lower_limit().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lower_limit");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_contract_type;
        break;
      }

      // optional .pb.dms.ContractType contract_type = 7;
      case 7: {
        if (tag == 56) {
         parse_contract_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::dms::ContractType_IsValid(value)) {
            set_contract_type(static_cast< ::pb::dms::ContractType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_legA;
        break;
      }

      // optional string legA = 8;
      case 8: {
        if (tag == 66) {
         parse_legA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lega()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lega().data(), this->lega().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lega");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_legB;
        break;
      }

      // optional string legB = 9;
      case 9: {
        if (tag == 74) {
         parse_legB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_legb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->legb().data(), this->legb().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "legb");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.dms.Contract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.dms.Contract)
  return false;
#undef DO_
}

void Contract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.dms.Contract)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string tick_size = 2;
  if (has_tick_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tick_size().data(), this->tick_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tick_size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tick_size(), output);
  }

  // optional string tick_value = 3;
  if (has_tick_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tick_value().data(), this->tick_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tick_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tick_value(), output);
  }

  // optional string yesterday_close_price = 4;
  if (has_yesterday_close_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->yesterday_close_price().data(), this->yesterday_close_price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "yesterday_close_price");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->yesterday_close_price(), output);
  }

  // optional string upper_limit = 5;
  if (has_upper_limit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upper_limit().data(), this->upper_limit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "upper_limit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->upper_limit(), output);
  }

  // optional string lower_limit = 6;
  if (has_lower_limit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lower_limit().data(), this->lower_limit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lower_limit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->lower_limit(), output);
  }

  // optional .pb.dms.ContractType contract_type = 7;
  if (has_contract_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->contract_type(), output);
  }

  // optional string legA = 8;
  if (has_lega()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lega().data(), this->lega().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lega");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->lega(), output);
  }

  // optional string legB = 9;
  if (has_legb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->legb().data(), this->legb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "legb");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->legb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.dms.Contract)
}

::google::protobuf::uint8* Contract::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.dms.Contract)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string tick_size = 2;
  if (has_tick_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tick_size().data(), this->tick_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tick_size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tick_size(), target);
  }

  // optional string tick_value = 3;
  if (has_tick_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tick_value().data(), this->tick_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tick_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tick_value(), target);
  }

  // optional string yesterday_close_price = 4;
  if (has_yesterday_close_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->yesterday_close_price().data(), this->yesterday_close_price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "yesterday_close_price");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->yesterday_close_price(), target);
  }

  // optional string upper_limit = 5;
  if (has_upper_limit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upper_limit().data(), this->upper_limit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "upper_limit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->upper_limit(), target);
  }

  // optional string lower_limit = 6;
  if (has_lower_limit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lower_limit().data(), this->lower_limit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lower_limit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lower_limit(), target);
  }

  // optional .pb.dms.ContractType contract_type = 7;
  if (has_contract_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->contract_type(), target);
  }

  // optional string legA = 8;
  if (has_lega()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lega().data(), this->lega().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lega");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->lega(), target);
  }

  // optional string legB = 9;
  if (has_legb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->legb().data(), this->legb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "legb");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->legb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.dms.Contract)
  return target;
}

int Contract::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string tick_size = 2;
    if (has_tick_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tick_size());
    }

    // optional string tick_value = 3;
    if (has_tick_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tick_value());
    }

    // optional string yesterday_close_price = 4;
    if (has_yesterday_close_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yesterday_close_price());
    }

    // optional string upper_limit = 5;
    if (has_upper_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upper_limit());
    }

    // optional string lower_limit = 6;
    if (has_lower_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lower_limit());
    }

    // optional .pb.dms.ContractType contract_type = 7;
    if (has_contract_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->contract_type());
    }

    // optional string legA = 8;
    if (has_lega()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lega());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string legB = 9;
    if (has_legb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->legb());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Contract::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Contract* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Contract*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Contract::MergeFrom(const Contract& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tick_size()) {
      set_tick_size(from.tick_size());
    }
    if (from.has_tick_value()) {
      set_tick_value(from.tick_value());
    }
    if (from.has_yesterday_close_price()) {
      set_yesterday_close_price(from.yesterday_close_price());
    }
    if (from.has_upper_limit()) {
      set_upper_limit(from.upper_limit());
    }
    if (from.has_lower_limit()) {
      set_lower_limit(from.lower_limit());
    }
    if (from.has_contract_type()) {
      set_contract_type(from.contract_type());
    }
    if (from.has_lega()) {
      set_lega(from.lega());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_legb()) {
      set_legb(from.legb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Contract::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contract::CopyFrom(const Contract& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contract::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Contract::Swap(Contract* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(tick_size_, other->tick_size_);
    std::swap(tick_value_, other->tick_value_);
    std::swap(yesterday_close_price_, other->yesterday_close_price_);
    std::swap(upper_limit_, other->upper_limit_);
    std::swap(lower_limit_, other->lower_limit_);
    std::swap(contract_type_, other->contract_type_);
    std::swap(lega_, other->lega_);
    std::swap(legb_, other->legb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Contract::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Contract_descriptor_;
  metadata.reflection = Contract_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Turnover::kContractFieldNumber;
const int Turnover::kTotalVolumeFieldNumber;
const int Turnover::kTurnoverFieldNumber;
#endif  // !_MSC_VER

Turnover::Turnover()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.dms.Turnover)
}

void Turnover::InitAsDefaultInstance() {
}

Turnover::Turnover(const Turnover& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.dms.Turnover)
}

void Turnover::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_volume_ = GOOGLE_ULONGLONG(0);
  turnover_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Turnover::~Turnover() {
  // @@protoc_insertion_point(destructor:pb.dms.Turnover)
  SharedDtor();
}

void Turnover::SharedDtor() {
  if (contract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contract_;
  }
  if (this != default_instance_) {
  }
}

void Turnover::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Turnover::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Turnover_descriptor_;
}

const Turnover& Turnover::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dms_2eproto();
  return *default_instance_;
}

Turnover* Turnover::default_instance_ = NULL;

Turnover* Turnover::New() const {
  return new Turnover;
}

void Turnover::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Turnover*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(total_volume_, turnover_);
    if (has_contract()) {
      if (contract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contract_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Turnover::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.dms.Turnover)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string contract = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contract");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_volume;
        break;
      }

      // optional uint64 total_volume = 2;
      case 2: {
        if (tag == 16) {
         parse_total_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_volume_)));
          set_has_total_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_turnover;
        break;
      }

      // optional double turnover = 3;
      case 3: {
        if (tag == 25) {
         parse_turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.dms.Turnover)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.dms.Turnover)
  return false;
#undef DO_
}

void Turnover::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.dms.Turnover)
  // optional string contract = 1;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contract");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->contract(), output);
  }

  // optional uint64 total_volume = 2;
  if (has_total_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->total_volume(), output);
  }

  // optional double turnover = 3;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->turnover(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.dms.Turnover)
}

::google::protobuf::uint8* Turnover::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.dms.Turnover)
  // optional string contract = 1;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contract");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contract(), target);
  }

  // optional uint64 total_volume = 2;
  if (has_total_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->total_volume(), target);
  }

  // optional double turnover = 3;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->turnover(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.dms.Turnover)
  return target;
}

int Turnover::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string contract = 1;
    if (has_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract());
    }

    // optional uint64 total_volume = 2;
    if (has_total_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_volume());
    }

    // optional double turnover = 3;
    if (has_turnover()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Turnover::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Turnover* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Turnover*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Turnover::MergeFrom(const Turnover& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contract()) {
      set_contract(from.contract());
    }
    if (from.has_total_volume()) {
      set_total_volume(from.total_volume());
    }
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Turnover::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Turnover::CopyFrom(const Turnover& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Turnover::IsInitialized() const {

  return true;
}

void Turnover::Swap(Turnover* other) {
  if (other != this) {
    std::swap(contract_, other->contract_);
    std::swap(total_volume_, other->total_volume_);
    std::swap(turnover_, other->turnover_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Turnover::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Turnover_descriptor_;
  metadata.reflection = Turnover_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dms
}  // namespace pb

// @@protoc_insertion_point(global_scope)
